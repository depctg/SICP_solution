#lang racket
(define (sym x)
    (cond ((> x 0) 1)
          ((= x 0) 0)
          (else -1)))
(define (gcd a b)
  (if (= 0 b)
      a
      (gcd b (remainder a b))))
(define numer car)
(define denom cdr)
(define (make-rat n d)
  (let ((nn (/ n (gcd n d)))
        (dd (/ d (gcd n d))))
    (cons (* (sym (* nn dd)) (abs nn))
          (abs dd))))
; ex2-2
(define make-point cons)
(define x-point car)
(define y-point cdr)
(define start-segment car)
(define end-segment cdr)
(define make-segment cons)
(define (midpoint-segment x)
  (make-point (/ (+ (x-point (start-segment x))
                    (x-point (end-segment x)))
                 2)
              (/ (+ (y-point (start-segment x))
                    (y-point (end-segment x)))
                 2)))
(define (print-point x)
  (newline)
  (display "(")
  (display (x-point x))
  (display ",")
  (display (y-point x))
  (display ")"))
; ex2-3
; length-x-ret length-y-ret
; make-ret point-up-left point-down-right
(define (make-ret) cons)
(define (upleft-point) car)
(define (downright-point) car)
(define (length-x-ret x)
  (abs (- (x-point (upleft-point x))
          (x-point (downright-point x)))))
(define (length-y-ret x)
  (abs (- (y-point (upleft-point x))
          (y-point (downright-point x)))))
